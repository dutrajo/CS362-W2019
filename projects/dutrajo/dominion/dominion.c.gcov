        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 113979 returned 100% blocks executed 100%
   113979:    8:int compare(const void* a, const void* b) {
   113979:    9:	if (*(int*)a > *(int*)b)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    57153:   10:		return 1;
    56826:   11:	if (*(int*)a < *(int*)b)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
    25408:   12:		return -1;
    31418:   13:	return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:	int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
function initializeGame called 3 returned 100% blocks executed 85%
        3:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;
        -:   43:	//set up random number generator
        3:   44:	SelectStream(1);
call    0 returned 100%
        3:   45:	PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:	//check number of players
        3:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
        3:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
       33:   57:	for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:	{
      330:   59:		for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:		{
      300:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
        3:   73:	if (numPlayers == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   74:	{
    #####:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
        3:   77:	else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
        3:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
        3:   87:	if (numPlayers == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   88:	{
    #####:   89:		state->supplyCount[estate] = 8;
    #####:   90:		state->supplyCount[duchy] = 8;
    #####:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
        3:   95:		state->supplyCount[estate] = 12;
        3:   96:		state->supplyCount[duchy] = 12;
        3:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
        3:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  102:	state->supplyCount[silver] = 40;
        3:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
       63:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:	{
      495:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:		{
      465:  110:			if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
       30:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:				{
    #####:  115:					if (numPlayers == 2) {
branch  0 never executed
branch  1 never executed
    #####:  116:						state->supplyCount[i] = 8;
        -:  117:					}
    #####:  118:					else { state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
       30:  122:					state->supplyCount[i] = 10;
        -:  123:				}
       30:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
      435:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
       15:  138:	for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  139:	{
       12:  140:		state->deckCount[i] = 0;
       48:  141:		for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:		{
       36:  143:			state->deck[i][j] = estate;
       36:  144:			state->deckCount[i]++;
        -:  145:		}
       96:  146:		for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:		{
       84:  148:			state->deck[i][j] = copper;
       84:  149:			state->deckCount[i]++;
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
       15:  154:	for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  155:	{
       12:  156:		if (shuffle(i, state) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
       15:  163:	for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  164:	{
        -:  165:		//initialize hand size to zero
       12:  166:		state->handCount[i] = 0;
       12:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
       84:  176:	for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:	{
       81:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
        3:  182:	state->outpostPlayed = 0;
        3:  183:	state->phase = 0;
        3:  184:	state->numActions = 1;
        3:  185:	state->numBuys = 1;
        3:  186:	state->playedCardCount = 0;
        3:  187:	state->whoseTurn = 0;
        3:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
       18:  192:	for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  193:		drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:	}
        -:  195:
        3:  196:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        3:  198:	return 0;
        -:  199:}
        -:  200:
function shuffle called 130 returned 100% blocks executed 100%
      130:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
      130:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
      130:  209:	if (state->deckCount[player] < 1)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
       59:  210:		return -1;
       71:  211:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    16389:  214:	while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    16247:  215:		card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    16247:  216:		newDeck[newDeckPos] = state->deck[player][card];
    16247:  217:		newDeckPos++;
  1411115:  218:		for (i = card; i < state->deckCount[player] - 1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1394868:  219:			state->deck[player][i] = state->deck[player][i + 1];
        -:  220:		}
    16247:  221:		state->deckCount[player]--;
        -:  222:	}
    16318:  223:	for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    16247:  224:		state->deck[player][i] = newDeck[i];
    16247:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
       71:  228:	return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if (state->numActions < 1)
branch  0 never executed
branch  1 never executed
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if (card < adventurer || card > treasure_map)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:	return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG) {
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
        -:  286:	}
    #####:  287:	else if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  288:		if (DEBUG)
        -:  289:			printf("There are not any of that type of card left\n");
    #####:  290:		return -1;
        -:  291:	}
    #####:  292:	else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:		if (DEBUG)
        -:  294:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:		return -1;
        -:  296:	}
        -:  297:	else {
    #####:  298:		state->phase = 1;
        -:  299:		//state->supplyCount[supplyPos]--;
    #####:  300:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  301:
    #####:  302:		state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  303:		state->numBuys--;
        -:  304:		if (DEBUG)
        -:  305:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:	}
        -:  307:
        -:  308:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:	//state->discardCount[who]++;
        -:  310:
    #####:  311:	return 0;
        -:  312:}
        -:  313:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  314:int numHandCards(struct gameState *state) {
    #####:  315:	return state->handCount[whoseTurn(state)];
call    0 never executed
        -:  316:}
        -:  317:
function handCard called 0 returned 0% blocks executed 0%
    #####:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  320:	return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
function supplyCount called 251 returned 100% blocks executed 100%
      251:  323:int supplyCount(int card, struct gameState *state) {
      251:  324:	return state->supplyCount[card];
        -:  325:}
        -:  326:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:	int i;
    #####:  329:	int count = 0;
        -:  330:
    #####:  331:	for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  332:	{
    #####:  333:		if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  334:	}
        -:  335:
    #####:  336:	for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  337:	{
    #####:  338:		if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  339:	}
        -:  340:
    #####:  341:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  342:	{
    #####:  343:		if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  344:	}
        -:  345:
    #####:  346:	return count;
        -:  347:}
        -:  348:
function whoseTurn called 3000 returned 100% blocks executed 100%
     3000:  349:int whoseTurn(struct gameState *state) {
     3000:  350:	return state->whoseTurn;
        -:  351:}
        -:  352:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  353:int endTurn(struct gameState *state) {
        -:  354:	int k;
        -:  355:	int i;
    #####:  356:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  357:
        -:  358:	//Discard hand
    #####:  359:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  360:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  362:	}
    #####:  363:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:
        -:  365:	//Code for determining the player
    #####:  366:	if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  367:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  368:	}
        -:  369:	else {
    #####:  370:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:	}
        -:  372:
    #####:  373:	state->outpostPlayed = 0;
    #####:  374:	state->phase = 0;
    #####:  375:	state->numActions = 1;
    #####:  376:	state->coins = 0;
    #####:  377:	state->numBuys = 1;
    #####:  378:	state->playedCardCount = 0;
    #####:  379:	state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:	//int k; move to top
        -:  382:	//Next player draws hand
    #####:  383:	for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  384:		drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  385:	}
        -:  386:
        -:  387:	//Update money
    #####:  388:	updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  389:
    #####:  390:	return 0;
        -:  391:}
        -:  392:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  393:int isGameOver(struct gameState *state) {
        -:  394:	int i;
        -:  395:	int j;
        -:  396:
        -:  397:	//if stack of Province cards is empty, the game ends
    #####:  398:	if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  399:	{
    #####:  400:		return 1;
        -:  401:	}
        -:  402:
        -:  403:	//if three supply pile are at 0, the game ends
    #####:  404:	j = 0;
    #####:  405:	for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  406:	{
    #####:  407:		if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  408:		{
    #####:  409:			j++;
        -:  410:		}
        -:  411:	}
    #####:  412:	if (j >= 3)
branch  0 never executed
branch  1 never executed
        -:  413:	{
    #####:  414:		return 1;
        -:  415:	}
        -:  416:
    #####:  417:	return 0;
        -:  418:}
        -:  419:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  420:int scoreFor(int player, struct gameState *state) {
        -:  421:
        -:  422:	int i;
    #####:  423:	int score = 0;
        -:  424:	//score from hand
    #####:  425:	for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  426:	{
    #####:  427:		if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:		if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:		if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  430:		if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  431:		if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  433:	}
        -:  434:
        -:  435:	//score from discard
    #####:  436:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  437:	{
    #####:  438:		if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:		if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:		if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  441:		if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  442:		if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  444:	}
        -:  445:
        -:  446:	//score from deck
    #####:  447:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:	{
    #####:  449:		if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:		if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:		if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  452:		if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  453:		if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  455:	}
        -:  456:
    #####:  457:	return score;
        -:  458:}
        -:  459:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:	int i;
        -:  462:	int j;
        -:  463:	int highScore;
        -:  464:	int currentPlayer;
        -:  465:
        -:  466:	//get score for each player
    #####:  467:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  468:	{
        -:  469:		//set unused player scores to -9999
    #####:  470:		if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  471:		{
    #####:  472:			players[i] = -9999;
        -:  473:		}
        -:  474:		else
        -:  475:		{
    #####:  476:			players[i] = scoreFor(i, state);
call    0 never executed
        -:  477:		}
        -:  478:	}
        -:  479:
        -:  480:	//find highest score
    #####:  481:	j = 0;
    #####:  482:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  483:	{
    #####:  484:		if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  485:		{
    #####:  486:			j = i;
        -:  487:		}
        -:  488:	}
    #####:  489:	highScore = players[j];
        -:  490:
        -:  491:	//add 1 to players who had less turns
    #####:  492:	currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  493:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  494:	{
    #####:  495:		if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  496:		{
    #####:  497:			players[i]++;
        -:  498:		}
        -:  499:	}
        -:  500:
        -:  501:	//find new highest score
    #####:  502:	j = 0;
    #####:  503:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  504:	{
    #####:  505:		if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  506:		{
    #####:  507:			j = i;
        -:  508:		}
        -:  509:	}
    #####:  510:	highScore = players[j];
        -:  511:
        -:  512:	//set winners in array to 1 and rest to 0
    #####:  513:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  514:	{
    #####:  515:		if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  516:		{
    #####:  517:			players[i] = 1;
        -:  518:		}
        -:  519:		else
        -:  520:		{
    #####:  521:			players[i] = 0;
        -:  522:		}
        -:  523:	}
        -:  524:
    #####:  525:	return 0;
        -:  526:}
        -:  527:
function drawCard called 27906 returned 100% blocks executed 92%
    27906:  528:int drawCard(int player, struct gameState *state)
        -:  529:{
        -:  530:	int count;
        -:  531:	int deckCounter;
    27906:  532:	if (state->deckCount[player] <= 0) {//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  533:
        -:  534:	  //Step 1 Shuffle the discard pile back into a deck
        -:  535:		int i;
        -:  536:		//Move discard to deck
    16186:  537:		for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    16127:  538:			state->deck[player][i] = state->discard[player][i];
    16127:  539:			state->discard[player][i] = -1;
        -:  540:		}
        -:  541:
       59:  542:		state->deckCount[player] = state->discardCount[player];
       59:  543:		state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:		//Shufffle the deck
       59:  546:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  547:
        -:  548:		if (DEBUG) {//Debug statements
        -:  549:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:		}
        -:  551:
       59:  552:		state->discardCount[player] = 0;
        -:  553:
        -:  554:		//Step 2 Draw Card
       59:  555:		count = state->handCount[player];//Get current player's hand count
        -:  556:
        -:  557:		if (DEBUG) {//Debug statements
        -:  558:			printf("Current hand count: %d\n", count);
        -:  559:		}
        -:  560:
       59:  561:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
       59:  563:		if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  564:			return -1;
        -:  565:
       59:  566:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       59:  567:		state->deckCount[player]--;
       59:  568:		state->handCount[player]++;//Increment hand count
        -:  569:	}
        -:  570:
        -:  571:	else {
    27847:  572:		int count = state->handCount[player];//Get current hand count for player
        -:  573:		int deckCounter;
        -:  574:		if (DEBUG) {//Debug statements
        -:  575:			printf("Current hand count: %d\n", count);
        -:  576:		}
        -:  577:
    27847:  578:		deckCounter = state->deckCount[player];//Create holder for the deck count
    27847:  579:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    27847:  580:		state->deckCount[player]--;
    27847:  581:		state->handCount[player]++;//Increment hand count
        -:  582:	}
        -:  583:
    27906:  584:	return 0;
        -:  585:}
        -:  586:
function getCost called 4000 returned 100% blocks executed 97%
     4000:  587:int getCost(int cardNumber)
        -:  588:{
     4000:  589:	switch (cardNumber)
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 6%
branch  3 taken 5%
branch  4 taken 5%
branch  5 taken 5%
branch  6 taken 5%
branch  7 taken 5%
branch  8 taken 4%
branch  9 taken 2%
branch 10 taken 2%
branch 11 taken 5%
branch 12 taken 4%
branch 13 taken 5%
branch 14 taken 6%
branch 15 taken 2%
branch 16 taken 2%
branch 17 taken 4%
branch 18 taken 2%
branch 19 taken 2%
branch 20 taken 2%
branch 21 taken 4%
branch 22 taken 6%
branch 23 taken 2%
branch 24 taken 2%
branch 25 taken 5%
branch 26 taken 2%
branch 27 taken 0%
        -:  590:	{
        -:  591:	case curse:
      170:  592:		return 0;
        -:  593:	case estate:
      176:  594:		return 2;
        -:  595:	case duchy:
      222:  596:		return 5;
        -:  597:	case province:
      180:  598:		return 8;
        -:  599:	case copper:
      198:  600:		return 0;
        -:  601:	case silver:
      210:  602:		return 3;
        -:  603:	case gold:
      180:  604:		return 6;
        -:  605:	case adventurer:
      198:  606:		return 6;
        -:  607:	case council_room:
      156:  608:		return 5;
        -:  609:	case feast:
       68:  610:		return 4;
        -:  611:	case gardens:
       70:  612:		return 4;
        -:  613:	case mine:
      208:  614:		return 5;
        -:  615:	case remodel:
      178:  616:		return 4;
        -:  617:	case smithy:
      214:  618:		return 4;
        -:  619:	case village:
      238:  620:		return 3;
        -:  621:	case baron:
       80:  622:		return 4;
        -:  623:	case great_hall:
       68:  624:		return 3;
        -:  625:	case minion:
      164:  626:		return 5;
        -:  627:	case steward:
       66:  628:		return 3;
        -:  629:	case tribute:
       64:  630:		return 5;
        -:  631:	case ambassador:
       64:  632:		return 3;
        -:  633:	case cutpurse:
      164:  634:		return 4;
        -:  635:	case embargo:
      228:  636:		return 2;
        -:  637:	case outpost:
       90:  638:		return 5;
        -:  639:	case salvager:
       72:  640:		return 4;
        -:  641:	case sea_hag:
      198:  642:		return 4;
        -:  643:	case treasure_map:
       76:  644:		return 4;
        -:  645:	}
        -:  646:
    #####:  647:	return -1;
        -:  648:}
        -:  649:
        -:  650:/*
        -:  651:	int cardEffectAdventurer(
        -:  652:							struct gameState *state,
        -:  653:							int temphand[],
        -:  654:							int *drawntreasure,
        -:  655:							int *currentPlayer,
        -:  656:							int *cardDrawn,
        -:  657:							int *z
        -:  658:							)
        -:  659:	Parameters:
        -:  660:		struct gameState *state: a pointer to the current gameState object
        -:  661:		int temphand[]: an array representing cards
        -:  662:		int *drawntreasure: a pointer to the amount of treasure in the players hand
        -:  663:		int *currentPlayer: a pointer to the value representing the current player
        -:  664:		int *cardDrawn: a pointer to a card representing the current card drawn
        -:  665:		int *z: a pointer to an int representing the number of cards drawn
        -:  666:	Returns:
        -:  667:		function always returns 0.
        -:  668:	Description:
        -:  669:		This function was added 01/26/2019 by Joseph Dutra as part of a refactoring of
        -:  670:		the original source code. This function is called when the card effect for the
        -:  671:		Adventurer card is called.
        -:  672:*/
function cardEffectAdventurer called 1000 returned 100% blocks executed 100%
     1000:  673:int cardEffectAdventurer(struct gameState *state, int temphand[], int *drawntreasure, int *currentPlayer, int *cardDrawn, int *z)
        -:  674:{
    29255:  675:	while (*drawntreasure <= 2) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    27255:  676:		if (state->deckCount[*currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       59:  677:			shuffle(*currentPlayer, state);
call    0 returned 100%
        -:  678:		}
    27255:  679:		drawCard(*currentPlayer, state);
call    0 returned 100%
    27255:  680:		*cardDrawn = state->hand[*currentPlayer][state->handCount[*currentPlayer] - 1];//top card of hand is most recently drawn card.
    27255:  681:		if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
     3000:  682:			(*drawntreasure)++;
        -:  683:		else {
    24255:  684:			temphand[*z] = *cardDrawn;
    24255:  685:			state->handCount[*currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    24255:  686:			(*z)++;
        -:  687:		}
        -:  688:	}
    26255:  689:	while (*z - 1 >= 0) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    24255:  690:		state->discard[*currentPlayer][state->discardCount[*currentPlayer]++] = temphand[*z - 1]; // discard all cards in play that have been drawn
    24255:  691:		*z = *z - 1;
        -:  692:	}
        -:  693:
     1000:  694:	return 0;
        -:  695:}
        -:  696:
        -:  697:/*
        -:  698:	int cardEffectCouncilRoom(
        -:  699:							struct gameState *state,
        -:  700:							int *currentPlayer,
        -:  701:							int *handPos
        -:  702:							)
        -:  703:	Parameters:
        -:  704:		struct gameState *state: a pointer to the current gameState object
        -:  705:		int *currentPlayer: a pointer to an int representing the current player
        -:  706:		int *handPos: a pointer to a card in the current player's hand
        -:  707:	Returns:
        -:  708:		Function always returns 0.
        -:  709:	Description:
        -:  710:		This function was added 01/26/2019 by Joseph Dutra as part of a refactoring of
        -:  711:		the original source code. This function is called when the card effect for the
        -:  712:		Council Room card is called.
        -:  713:*/
function cardEffectCouncilRoom called 0 returned 0% blocks executed 0%
    #####:  714:int cardEffectCouncilRoom(struct gameState *state, int *currentPlayer, int *handPos)
        -:  715:{
        -:  716:	int i;
        -:  717:	//+4 Cards
    #####:  718:	for (i = 0; i <= 4; i++)
branch  0 never executed
branch  1 never executed
        -:  719:	{
    #####:  720:		drawCard(*currentPlayer, state);
call    0 never executed
        -:  721:	}
        -:  722:
        -:  723:	//+1 Buy
    #####:  724:	state->numBuys++;
        -:  725:
        -:  726:	//Each other player draws a card
    #####:  727:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  728:	{
    #####:  729:		if (i != *currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  730:		{
    #####:  731:			drawCard(i, state);
call    0 never executed
        -:  732:		}
        -:  733:	}
        -:  734:
        -:  735:	//put played card in played card pile
    #####:  736:	discardCard(*handPos, *currentPlayer, state, 0);
call    0 never executed
        -:  737:
    #####:  738:	return 0;
        -:  739:}
        -:  740:
        -:  741:/*
        -:  742:	int cardEffectFeast(
        -:  743:						struct gameState *state,
        -:  744:						int *currentPlayer,
        -:  745:						int temphand[],
        -:  746:						int *x,
        -:  747:						int *choice1
        -:  748:						)
        -:  749:	Parameters:
        -:  750:		struct gameState *state: a pointer to the current gameState object
        -:  751:		int *currentPlayer: a pointer to an int representing the current player
        -:  752:		int temphand[]: an array of ints represending a hand of cards
        -:  753:		int *x: a pointer to an integer
        -:  754:		int *choice1: a pointer to an integer representing a users selection
        -:  755:	Returns:
        -:  756:		Function always returns 0.
        -:  757:	Description:
        -:  758:		This function was added 01/26/2019 by Joseph Dutra as part of a refactoring of
        -:  759:		the original source code. This function is called when the card effect for the
        -:  760:		Feast card is called.
        -:  761:*/
function cardEffectFeast called 0 returned 0% blocks executed 0%
    #####:  762:int cardEffectFeast(struct gameState *state, int *currentPlayer, int temphand[], int *x, int *choice1)
        -:  763:{
        -:  764:	int i;
        -:  765:
        -:  766:	//gain card with cost up to 5
        -:  767:	//Backup hand
    #####:  768:	for (i = 0; i <= state->handCount[*currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  769:		temphand[i] = state->hand[*currentPlayer][i];//Backup card
    #####:  770:		state->hand[*currentPlayer][i] = -1;//Set to nothing
        -:  771:	}
        -:  772:	//Backup hand
        -:  773:
        -:  774:	//Update Coins for Buy
    #####:  775:	updateCoins(*currentPlayer, state, 10);
call    0 never executed
    #####:  776:	*x = 1;//Condition to loop on
    #####:  777:	while (*x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  778:		if (supplyCount(*choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  779:			if (DEBUG)
        -:  780:				printf("None of that card left, sorry!\n");
        -:  781:
        -:  782:			if (DEBUG) {
        -:  783:				printf("Cards Left: %d\n", supplyCount(*choice1, state));
        -:  784:			}
        -:  785:		}
    #####:  786:		else if (state->coins < getCost(*choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  787:			printf("That card is too expensive!\n");
call    0 never executed
        -:  788:
        -:  789:			if (DEBUG) {
        -:  790:				printf("Coins: %d < %d\n", state->coins, getCost(*choice1));
        -:  791:			}
        -:  792:		}
        -:  793:		else {
        -:  794:
        -:  795:			if (DEBUG) {
        -:  796:				printf("Deck Count: %d\n", state->handCount[*currentPlayer] + state->deckCount[*currentPlayer] + state->discardCount[*currentPlayer]);
        -:  797:			}
        -:  798:
    #####:  799:			gainCard(*choice1, state, 0, *currentPlayer);//Gain the card
call    0 never executed
    #####:  800:			x = 0;//No more buying cards
        -:  801:
        -:  802:			if (DEBUG) {
        -:  803:				printf("Deck Count: %d\n", state->handCount[*currentPlayer] + state->deckCount[*currentPlayer] + state->discardCount[*currentPlayer]);
        -:  804:			}
        -:  805:
        -:  806:		}
        -:  807:	}
        -:  808:
        -:  809:	//Reset Hand
    #####:  810:	for (i = 0; i <= state->handCount[*currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  811:		state->hand[*currentPlayer][i] = temphand[i];
    #####:  812:		temphand[i] = -1;
        -:  813:	}
        -:  814:	//Reset Hand
    #####:  815:	return 0;
        -:  816:}
        -:  817:
        -:  818:/*
        -:  819:	int cardEffectMine(
        -:  820:						struct gameState *state,
        -:  821:						int *j,
        -:  822:						int *currentPlayer,
        -:  823:						int *choice1,
        -:  824:						int *choice2,
        -:  825:						int *handPos
        -:  826:						)
        -:  827:	Parameters:
        -:  828:		struct gameState *state: a pointer to the current gameState object
        -:  829:		int *j: a pointer to an integer representing a card to trash
        -:  830:		int *currentPlayer: a pointer to an int representing the current player
        -:  831:		int *choice1: a pointer to an integer representing a users selection
        -:  832:		int *choice2: a pointer to an integer representing a users selection
        -:  833:		int *handPos: a pointer to an integer representing a card in users hand
        -:  834:	Returns:
        -:  835:		Function always returns 0.
        -:  836:	Description:
        -:  837:		This function was added 01/26/2019 by Joseph Dutra as part of a refactoring of
        -:  838:		the original source code. This function is called when the card effect for the
        -:  839:		Mine card is called.
        -:  840:*/
function cardEffectMine called 0 returned 0% blocks executed 0%
    #####:  841:int cardEffectMine(struct gameState *state, int *j, int *currentPlayer, int *choice1, int *choice2, int *handPos)
        -:  842:{
        -:  843:	int i;
        -:  844:
    #####:  845:	*j = state->hand[*currentPlayer][*choice1];  //store card we will trash
        -:  846:
    #####:  847:	if (state->hand[*currentPlayer][*choice1] < copper || state->hand[*currentPlayer][*choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  848:	{
    #####:  849:		return -1;
        -:  850:	}
        -:  851:
    #####:  852:	if (*choice2 > treasure_map || *choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  853:	{
    #####:  854:		return -1;
        -:  855:	}
        -:  856:
    #####:  857:	if ((getCost(state->hand[*currentPlayer][*choice1]) + 3) > getCost(*choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  858:	{
    #####:  859:		return -1;
        -:  860:	}
        -:  861:
    #####:  862:	gainCard(*choice2, state, 2, *currentPlayer);
call    0 never executed
        -:  863:
        -:  864:	//discard card from hand
    #####:  865:	discardCard(*handPos, *currentPlayer, state, 0);
call    0 never executed
        -:  866:
        -:  867:	//discard trashed card
    #####:  868:	for (i = 0; i < state->handCount[*currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  869:	{
    #####:  870:		if (state->hand[*currentPlayer][i] == *j)
branch  0 never executed
branch  1 never executed
        -:  871:		{
    #####:  872:			discardCard(i, *currentPlayer, state, 0);
call    0 never executed
    #####:  873:			break;
        -:  874:		}
        -:  875:	}
        -:  876:
    #####:  877:	return 0;
        -:  878:}
        -:  879:
        -:  880:/*
        -:  881:	int cardEffectSmithy(
        -:  882:						struct gameState *state,
        -:  883:						int *currentPlayer,
        -:  884:						int *handPos
        -:  885:						)
        -:  886:	Parameters:
        -:  887:		struct gameState *state: a pointer to the current gameState object
        -:  888:		int *currentPlayer: a pointer to an int representing the current player
        -:  889:		int *handPos: a pointer to an integer representing a card in users hand
        -:  890:	Returns:
        -:  891:		Function always returns 0.
        -:  892:	Description:
        -:  893:		This function was added 01/26/2019 by Joseph Dutra as part of a refactoring of
        -:  894:		the original source code. This function is called when the card effect for the
        -:  895:		Smithy card is called.
        -:  896:*/
function cardEffectSmithy called 0 returned 0% blocks executed 0%
    #####:  897:int cardEffectSmithy(struct gameState *state, int *currentPlayer, int *handPos)
        -:  898:{
        -:  899:	int i;
        -:  900:	//+3 Cards
    #####:  901:	for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  902:	{
    #####:  903:		drawCard(*currentPlayer, state);
call    0 never executed
        -:  904:	}
        -:  905:
        -:  906:	//discard card from hand
    #####:  907:	discardCard(*handPos, *currentPlayer, state, 1);
call    0 never executed
    #####:  908:	return 0;
        -:  909:}
        -:  910:
function cardEffect called 3000 returned 100% blocks executed 15%
     3000:  911:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  912:{
        -:  913:	int i;
        -:  914:	int j;
        -:  915:	int k;
        -:  916:	int x;
        -:  917:	int index;
     3000:  918:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
     3000:  919:	int nextPlayer = currentPlayer + 1;
        -:  920:
     3000:  921:	int tributeRevealedCards[2] = { -1, -1 };
        -:  922:	int temphand[MAX_HAND];// moved above the if statement
     3000:  923:	int drawntreasure = 0;
        -:  924:	int cardDrawn;
     3000:  925:	int z = 0;// this is the counter for the temp hand
     3000:  926:	if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
      746:  927:		nextPlayer = 0;
        -:  928:	}
        -:  929:
        -:  930:
        -:  931:	//uses switch to select card and perform actions
     3000:  932:	switch (card)
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 33%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 33%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
        -:  933:	{
        -:  934:	case adventurer:
     1000:  935:		return cardEffectAdventurer(state, temphand, &drawntreasure, &currentPlayer, &cardDrawn, &z);
call    0 returned 100%
        -:  936:
        -:  937:	case council_room:
    #####:  938:		return cardEffectCouncilRoom(state, &currentPlayer, &handPos);
call    0 never executed
        -:  939:
        -:  940:	case feast:
    #####:  941:		return cardEffectFeast(state, &currentPlayer, temphand, &x, &choice1);
call    0 never executed
        -:  942:
        -:  943:	case gardens:
    #####:  944:		return -1;
        -:  945:
        -:  946:	case mine:
    #####:  947:		return cardEffectMine(state, &j, &currentPlayer, &choice1, &choice2, &handPos);
call    0 never executed
        -:  948:
        -:  949:	case remodel:
     1000:  950:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  951:
     1000:  952:		if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 75% (fallthrough)
branch  3 taken 25%
        -:  953:		{
      749:  954:			return -1;
        -:  955:		}
        -:  956:
      251:  957:		gainCard(choice2, state, 0, currentPlayer);
call    0 returned 100%
        -:  958:
        -:  959:		//discard card from hand
      251:  960:		discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  961:
        -:  962:		//discard trashed card
     5148:  963:		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  964:		{
     5148:  965:			if (state->hand[currentPlayer][i] == j)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  966:			{
      251:  967:				discardCard(i, currentPlayer, state, 0);
call    0 returned 100%
      251:  968:				break;
        -:  969:			}
        -:  970:		}
        -:  971:
        -:  972:
      251:  973:		return 0;
        -:  974:
        -:  975:	case smithy:
    #####:  976:		return cardEffectSmithy(state, &currentPlayer, &handPos);
call    0 never executed
        -:  977:
        -:  978:	case baron:
    #####:  979:		state->numBuys++;//Increase buys by 1!
    #####:  980:		if (choice1 > 0) {//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  981:			int p = 0;//Iterator for hand!
    #####:  982:			int card_not_discarded = 1;//Flag for discard set!
    #####:  983:			while (card_not_discarded) {
branch  0 never executed
branch  1 never executed
    #####:  984:				if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  985:					state->coins += 4;//Add 4 coins to the amount of coins
    #####:  986:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  987:					state->discardCount[currentPlayer]++;
    #####:  988:					for (; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  989:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  990:					}
    #####:  991:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  992:					state->handCount[currentPlayer]--;
    #####:  993:					card_not_discarded = 0;//Exit the loop
        -:  994:				}
    #####:  995:				else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  996:					if (DEBUG) {
        -:  997:						printf("No estate cards in your hand, invalid choice\n");
        -:  998:						printf("Must gain an estate if there are any\n");
        -:  999:					}
    #####: 1000:					if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1001:						gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1002:						state->supplyCount[estate]--;//Decrement estates
    #####: 1003:						if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1004:							isGameOver(state);
call    0 never executed
        -: 1005:						}
        -: 1006:					}
    #####: 1007:					card_not_discarded = 0;//Exit the loop
        -: 1008:				}
        -: 1009:
        -: 1010:				else {
    #####: 1011:					p++;//Next card
        -: 1012:				}
        -: 1013:			}
        -: 1014:		}
        -: 1015:
        -: 1016:		else {
    #####: 1017:			if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1018:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1019:				state->supplyCount[estate]--;//Decrement Estates
    #####: 1020:				if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1021:					isGameOver(state);
call    0 never executed
        -: 1022:				}
        -: 1023:			}
        -: 1024:		}
        -: 1025:
        -: 1026:
    #####: 1027:		return 0;
        -: 1028:
        -: 1029:	case great_hall:
        -: 1030:		//+1 Card
    #####: 1031:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1032:
        -: 1033:		//+1 Actions
    #####: 1034:		state->numActions++;
        -: 1035:
        -: 1036:		//discard card from hand
    #####: 1037:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1038:		return 0;
        -: 1039:
        -: 1040:	case minion:
        -: 1041:		//+1 action
    #####: 1042:		state->numActions++;
        -: 1043:
        -: 1044:		//discard card from hand
    #####: 1045:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1046:
    #####: 1047:		if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1048:		{
    #####: 1049:			state->coins = state->coins + 2;
        -: 1050:		}
        -: 1051:
    #####: 1052:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1053:		{
        -: 1054:			//discard hand
    #####: 1055:			while (numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1056:			{
    #####: 1057:				discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1058:			}
        -: 1059:
        -: 1060:			//draw 4
    #####: 1061:			for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1062:			{
    #####: 1063:				drawCard(currentPlayer, state);
call    0 never executed
        -: 1064:			}
        -: 1065:
        -: 1066:			//other players discard hand and redraw if hand size > 4
    #####: 1067:			for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1068:			{
    #####: 1069:				if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1070:				{
    #####: 1071:					if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -: 1072:					{
        -: 1073:						//discard hand
    #####: 1074:						while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -: 1075:						{
    #####: 1076:							discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1077:						}
        -: 1078:
        -: 1079:						//draw 4
    #####: 1080:						for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1081:						{
    #####: 1082:							drawCard(i, state);
call    0 never executed
        -: 1083:						}
        -: 1084:					}
        -: 1085:				}
        -: 1086:			}
        -: 1087:
        -: 1088:		}
    #####: 1089:		return 0;
        -: 1090:
        -: 1091:	case steward:
     1000: 1092:		if (choice1 == 1)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -: 1093:		{
        -: 1094:			//+2 cards
      318: 1095:			drawCard(currentPlayer, state);
call    0 returned 100%
      318: 1096:			drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1097:		}
      682: 1098:		else if (choice1 == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1099:		{
        -: 1100:			//+2 coins
      343: 1101:			state->coins = state->coins + 2;
        -: 1102:		}
        -: 1103:		else
        -: 1104:		{
        -: 1105:			//trash 2 cards in hand
      339: 1106:			discardCard(choice2, currentPlayer, state, 1);
call    0 returned 100%
      339: 1107:			discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -: 1108:		}
        -: 1109:
        -: 1110:		//discard card from hand
     1000: 1111:		discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     1000: 1112:		return 0;
        -: 1113:
        -: 1114:	case tribute:
    #####: 1115:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####: 1116:			if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1117:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1118:				state->deckCount[nextPlayer]--;
        -: 1119:			}
    #####: 1120:			else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1121:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1122:				state->discardCount[nextPlayer]--;
        -: 1123:			}
        -: 1124:			else {
        -: 1125:				//No Card to Reveal
        -: 1126:				if (DEBUG) {
        -: 1127:					printf("No cards to reveal\n");
        -: 1128:				}
        -: 1129:			}
        -: 1130:		}
        -: 1131:
        -: 1132:		else {
    #####: 1133:			if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####: 1134:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1135:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1136:					state->deckCount[nextPlayer]++;
    #####: 1137:					state->discard[nextPlayer][i] = -1;
    #####: 1138:					state->discardCount[nextPlayer]--;
        -: 1139:				}
        -: 1140:
    #####: 1141:				shuffle(nextPlayer, state);//Shuffle the deck
call    0 never executed
        -: 1142:			}
    #####: 1143:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1144:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1145:			state->deckCount[nextPlayer]--;
    #####: 1146:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1147:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1148:			state->deckCount[nextPlayer]--;
        -: 1149:		}
        -: 1150:
    #####: 1151:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1152:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1153:			state->playedCardCount++;
    #####: 1154:			tributeRevealedCards[1] = -1;
        -: 1155:		}
        -: 1156:
    #####: 1157:		for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1158:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1159:				state->coins += 2;
        -: 1160:			}
        -: 1161:
    #####: 1162:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1163:				drawCard(currentPlayer, state);
call    0 never executed
    #####: 1164:				drawCard(currentPlayer, state);
call    0 never executed
        -: 1165:			}
        -: 1166:			else {//Action Card
    #####: 1167:				state->numActions = state->numActions + 2;
        -: 1168:			}
        -: 1169:		}
        -: 1170:
    #####: 1171:		return 0;
        -: 1172:
        -: 1173:	case ambassador:
    #####: 1174:		j = 0;		//used to check if player has enough cards to discard
        -: 1175:
    #####: 1176:		if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1177:		{
    #####: 1178:			return -1;
        -: 1179:		}
        -: 1180:
    #####: 1181:		if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1182:		{
    #####: 1183:			return -1;
        -: 1184:		}
        -: 1185:
    #####: 1186:		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1187:		{
    #####: 1188:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1189:			{
    #####: 1190:				j++;
        -: 1191:			}
        -: 1192:		}
    #####: 1193:		if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1194:		{
    #####: 1195:			return -1;
        -: 1196:		}
        -: 1197:
        -: 1198:		if (DEBUG)
        -: 1199:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1200:
        -: 1201:		//increase supply count for choosen card by amount being discarded
    #####: 1202:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1203:
        -: 1204:		//each other player gains a copy of revealed card
    #####: 1205:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1206:		{
    #####: 1207:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1208:			{
    #####: 1209:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1210:			}
        -: 1211:		}
        -: 1212:
        -: 1213:		//discard played card from hand
    #####: 1214:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1215:
        -: 1216:		//trash copies of cards returned to supply
    #####: 1217:		for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1218:		{
    #####: 1219:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1220:			{
    #####: 1221:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1222:				{
    #####: 1223:					discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1224:					break;
        -: 1225:				}
        -: 1226:			}
        -: 1227:		}
        -: 1228:
    #####: 1229:		return 0;
        -: 1230:
        -: 1231:	case cutpurse:
        -: 1232:
    #####: 1233:		updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1234:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1235:		{
    #####: 1236:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1237:			{
    #####: 1238:				for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1239:				{
    #####: 1240:					if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1241:					{
    #####: 1242:						discardCard(j, i, state, 0);
call    0 never executed
    #####: 1243:						break;
        -: 1244:					}
    #####: 1245:					if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1246:					{
    #####: 1247:						for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1248:						{
        -: 1249:							if (DEBUG)
        -: 1250:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1251:						}
    #####: 1252:						break;
        -: 1253:					}
        -: 1254:				}
        -: 1255:
        -: 1256:			}
        -: 1257:
        -: 1258:		}
        -: 1259:
        -: 1260:		//discard played card from hand
    #####: 1261:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1262:
    #####: 1263:		return 0;
        -: 1264:
        -: 1265:
        -: 1266:	case embargo:
        -: 1267:		//+2 Coins
    #####: 1268:		state->coins = state->coins + 2;
        -: 1269:
        -: 1270:		//see if selected pile is in play
    #####: 1271:		if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1272:		{
    #####: 1273:			return -1;
        -: 1274:		}
        -: 1275:
        -: 1276:		//add embargo token to selected supply pile
    #####: 1277:		state->embargoTokens[choice1]++;
        -: 1278:
        -: 1279:		//trash card
    #####: 1280:		discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1281:		return 0;
        -: 1282:
        -: 1283:	case outpost:
        -: 1284:		//set outpost flag
    #####: 1285:		state->outpostPlayed++;
        -: 1286:
        -: 1287:		//discard card
    #####: 1288:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1289:		return 0;
        -: 1290:
        -: 1291:	case salvager:
        -: 1292:		//+1 buy
    #####: 1293:		state->numBuys++;
        -: 1294:
    #####: 1295:		if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1296:		{
        -: 1297:			//gain coins equal to trashed card
    #####: 1298:			state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1299:			//trash card
    #####: 1300:			discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1301:		}
        -: 1302:
        -: 1303:		//discard card
    #####: 1304:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1305:		return 0;
        -: 1306:
        -: 1307:	case sea_hag:
    #####: 1308:		for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1309:			if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1310:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1311:				state->discardCount[i]++;
    #####: 1312:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1313:			}
        -: 1314:		}
    #####: 1315:		return 0;
        -: 1316:
        -: 1317:	case treasure_map:
        -: 1318:		//search hand for another treasure_map
    #####: 1319:		index = -1;
    #####: 1320:		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1321:		{
    #####: 1322:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1323:			{
    #####: 1324:				index = i;
    #####: 1325:				break;
        -: 1326:			}
        -: 1327:		}
    #####: 1328:		if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1329:		{
        -: 1330:			//trash both treasure cards
    #####: 1331:			discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1332:			discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1333:
        -: 1334:			//gain 4 Gold cards
    #####: 1335:			for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1336:			{
    #####: 1337:				gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1338:			}
        -: 1339:
        -: 1340:			//return success
    #####: 1341:			return 1;
        -: 1342:		}
        -: 1343:
        -: 1344:		//no second treasure_map found in hand
    #####: 1345:		return -1;
        -: 1346:	}
        -: 1347:
    #####: 1348:	return -1;
        -: 1349:}
        -: 1350:
function discardCard called 2180 returned 100% blocks executed 89%
     2180: 1351:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1352:{
        -: 1353:
        -: 1354:	//if card is not trashed, added to Played pile 
     2180: 1355:	if (trashFlag < 1)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        -: 1356:	{
        -: 1357:		//add card to played pile
     1502: 1358:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     1502: 1359:		state->playedCardCount++;
        -: 1360:	}
        -: 1361:
        -: 1362:	//set played card to -1
     2180: 1363:	state->hand[currentPlayer][handPos] = -1;
        -: 1364:
        -: 1365:	//remove card from player's hand
     2180: 1366:	if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
        -: 1367:	{
        -: 1368:		//reduce number of cards in hand
      600: 1369:		state->handCount[currentPlayer]--;
        -: 1370:	}
     1580: 1371:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1372:	{
        -: 1373:		//reduce number of cards in hand
    #####: 1374:		state->handCount[currentPlayer]--;
        -: 1375:	}
        -: 1376:	else
        -: 1377:	{
        -: 1378:		//replace discarded card with last card in hand
     1580: 1379:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1380:		//set last card to -1
     1580: 1381:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1382:		//reduce number of cards in hand
     1580: 1383:		state->handCount[currentPlayer]--;
        -: 1384:	}
        -: 1385:
     2180: 1386:	return 0;
        -: 1387:}
        -: 1388:
function gainCard called 251 returned 100% blocks executed 70%
      251: 1389:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1390:{
        -: 1391:	//Note: supplyPos is enum of choosen card
        -: 1392:
        -: 1393:	//check if supply pile is empty (0) or card is not used in game (-1)
      251: 1394:	if (supplyCount(supplyPos, state) < 1)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1395:	{
    #####: 1396:		return -1;
        -: 1397:	}
        -: 1398:
        -: 1399:	//added card for [whoseTurn] current player:
        -: 1400:	// toFlag = 0 : add to discard
        -: 1401:	// toFlag = 1 : add to deck
        -: 1402:	// toFlag = 2 : add to hand
        -: 1403:
      251: 1404:	if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1405:	{
    #####: 1406:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1407:		state->deckCount[player]++;
        -: 1408:	}
      251: 1409:	else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1410:	{
    #####: 1411:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1412:		state->handCount[player]++;
        -: 1413:	}
        -: 1414:	else
        -: 1415:	{
      251: 1416:		state->discard[player][state->discardCount[player]] = supplyPos;
      251: 1417:		state->discardCount[player]++;
        -: 1418:	}
        -: 1419:
        -: 1420:	//decrease number in supply pile
      251: 1421:	state->supplyCount[supplyPos]--;
        -: 1422:
      251: 1423:	return 0;
        -: 1424:}
        -: 1425:
function updateCoins called 3003 returned 100% blocks executed 100%
     3003: 1426:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1427:{
        -: 1428:	int i;
        -: 1429:
        -: 1430:	//reset coin count
     3003: 1431:	state->coins = 0;
        -: 1432:
        -: 1433:	//add coins for each Treasure card in player's hand
   763273: 1434:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1435:	{
   760270: 1436:		if (state->hand[player][i] == copper)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1437:		{
    27997: 1438:			state->coins += 1;
        -: 1439:		}
   732273: 1440:		else if (state->hand[player][i] == silver)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1441:		{
    28235: 1442:			state->coins += 2;
        -: 1443:		}
   704038: 1444:		else if (state->hand[player][i] == gold)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1445:		{
    28139: 1446:			state->coins += 3;
        -: 1447:		}
        -: 1448:	}
        -: 1449:
        -: 1450:	//add bonus
     3003: 1451:	state->coins += bonus;
        -: 1452:
     3003: 1453:	return 0;
        -: 1454:}
        -: 1455:
        -: 1456:
        -: 1457://end of dominion.c
        -: 1458:
